import subprocess
import time

from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import UnexpectedAlertPresentException, NoSuchElementException, JavascriptException, WebDriverException
from selenium.webdriver.chrome.service import Service
import threading
import urllib3
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By

import pyzbar.pyzbar as pyzbar
import ssl
from selenium.webdriver.common.alert import Alert
import csv
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError

def Worker123(self, startCourt, endCourt, usedDate, startTime, endTime, teamName, userCount, purpose, isWeek):
    ssl._create_default_https_context = ssl._create_unverified_context
    self.parent.setLog(str(startCourt) + '번 부터 ' + str(endCourt) + '까지 예약 시작')
    _driver = self.chromeDriver

    parent_window = _driver.current_window_handle

    if str(startCourt) != str(endCourt):
        for i in range(10000000000):
            courtNumberUp = int(startCourt)

            while courtNumberUp < int(endCourt) + 1:
                if courtNumberUp == 10 or courtNumberUp == 11 or courtNumberUp == 12:
                    courtNumberUp += 1
                    continue
                try:
                    if self.isStart:
                        url = 'https://www.ycs.or.kr/fmcs/4?facilities_type=L&base_date=' + str(
                            usedDate) + '&rent_type=1001&center=YCS04&part=02&place=' + str(courtNumberUp) + '#regist_list'
                        _driver.get(url)
                        checkboxIds = getCheckBoxIds(isWeek, courtNumberUp, int(startTime), int(endTime))

                        WebDriverWait(_driver, 10).until(
                            EC.presence_of_element_located((By.ID, "checkbox_time_0"))
                        )

                        checkScripts = [];
                        for j in checkboxIds:
                            checkScripts.append("document.getElementById('" + j + "').click();")

                        sCheckScripts = "\n".join(checkScripts)

                        # execute_script()를 사용하여 스크립트 실행
                        _driver.execute_script(sCheckScripts)

                        WebDriverWait(_driver, 10).until(
                            EC.presence_of_element_located((By.ID, "phone_chk"))
                        )

                        script = ("document.getElementById('phone_chk').click();")

                        _driver.execute_script(script)

                        all_windows = _driver.window_handles

                        if len([window for window in all_windows if window != parent_window]) == 0:
                            courtNumberUp += 1
                            continue

                        child_window = [window for window in all_windows if window != parent_window][0]

                        _driver.switch_to.window(child_window)

                        WebDriverWait(_driver, 10).until(
                            EC.presence_of_element_located((By.ID, "pattern_inactive"))
                        )

                        script = ("document.getElementById('pattern_inactive').click();")

                        _driver.execute_script(script)

                        # 핸들러를 사용하여 현재 띄어진 창으로 전환
                        _driver.switch_to.window(_driver.current_window_handle)

                        # 현재 띄어진 창에서 스크린샷을 찍기
                        _driver.save_screenshot("screenshot1.png")

                        # 원하는 태그만 자르기
                        from PIL import Image
                        dnjsqhsimage = Image.open("screenshot1.png")

                        decodedObjects = pyzbar.decode(dnjsqhsimage)

                        qrcodeData = ""
                        for obj in decodedObjects:
                            qrcodeData = obj.data.decode("utf-8").split(":")[1].strip()

                        try:
                            script = (f"document.getElementById('qr_number').value='{qrcodeData}';")
                            _driver.execute_script(script)

                            verificationButton = _driver.find_element(By.CSS_SELECTOR,
                                                                      '#container_qr > div.mt-2 > div.button_contents.mt-4 > div > div.col-3 > button')
                            verificationButton.click()

                            # 경고창을 띄웁니다.
                            # alert = _driver.switch_to.alert
                            WebDriverWait(_driver, 10).until(EC.alert_is_present())

                            # 경고창을 클릭합니다.
                            Alert(_driver).accept()  # 확인 버튼 클릭

                            _driver.switch_to.window(parent_window)

                            script = ("document.getElementsByClassName('action_application')[0].click();")

                            WebDriverWait(_driver, 10).until(
                                EC.presence_of_element_located((By.CLASS_NAME, "action_application"))
                            )

                            _driver.execute_script(script)

                            WebDriverWait(_driver, 10).until(EC.alert_is_present())

                            # 경고창을 클릭합니다.
                            Alert(_driver).accept()  # 확인 버튼 클릭

                            WebDriverWait(_driver, 10).until(
                                EC.presence_of_element_located((By.ID, "team_nm"))
                            )

                            time_datas = _driver.find_element(By.ID, 'time_datas')
                            time_datsValue = time_datas.get_attribute('value')

                            if len(time_datsValue.split('|')) == 1:
                                courtNumberUp += 1
                                continue

                            phoneNumberEle = _driver.find_element(By.ID, 'mobile_tel')

                            # phoneNum = phoneNumberEle.get_attribute("value").replace('-', '')
                            phoneNum = '01063327323'

                            script = (f"document.getElementById('team_nm').value='{teamName}';"
                                      f"document.getElementById('users').value={userCount};"
                                      "document.getElementById('tel').value = '';"
                                      f"document.getElementById('purpose').value = '{purpose}';"
                                      "document.getElementById('agree_use1').checked = true;")

                            self.chromeDriver.execute_script(script)

                            self.chromeDriver.implicitly_wait(5)

                            script = ("document.getElementsByClassName('button action_write')[0].click();")
                            _driver.execute_script(script)

                            alert = WebDriverWait(_driver, 10).until(EC.alert_is_present())

                            if alert.text != '인증이 완료되지 않았습니다. 인증 부탁드립니다.':
                                Alert(_driver).accept()  # 확인 버튼 클릭

                                script = ("document.getElementsByClassName('button action_write')[0].click();")
                                _driver.execute_script(script)

                                WebDriverWait(_driver, 10).until(EC.alert_is_present())
                                Alert(_driver).accept()  # 확인 버튼 클릭
                            else:
                                Alert(_driver).accept()  # 확인 버튼 클릭

                                script = ("document.getElementsByClassName('button action_edit')[0].click();")
                                self.chromeDriver.execute_script(script)

                                all_windows = _driver.window_handles

                                child_window = [window for window in all_windows if window != parent_window][0]

                                _driver.switch_to.window(child_window)

                                script = (
                                    "document.getElementsByClassName('white_content')[0].setAttribute('style', 'display:none;');"
                                    "document.getElementsByClassName('black_background')[0].setAttribute('style', 'display:none;');")

                                WebDriverWait(_driver, 10).until(
                                    EC.presence_of_element_located((By.ID, "message_inactive"))
                                )

                                _driver.execute_script(script)

                                script = ("document.getElementById('message_inactive').click();")

                                _driver.execute_script(script)

                                wait = WebDriverWait(_driver, 10)

                                script = (f"document.getElementById('phone_number').value='{phoneNum}';"
                                          "document.getElementsByClassName('btn btn-lg btn-secondary')[0].click()")

                                _driver.execute_script(script)

                                # 경고창을 클릭합니다.
                                WebDriverWait(_driver, 10).until(EC.alert_is_present())
                                Alert(_driver).accept()  # 확인 버튼 클릭

                                # 텍스트 상자에 길이가 5이고 숫자인 값이 입력 될 때까지 대기합니다.
                                textbox = wait.until(EC.element_to_be_clickable((By.ID, 'check_number')))
                                wait.until(
                                    lambda driver: len(textbox.get_attribute('value').strip()) == 6)

                                script = ("document.getElementsByClassName('btn btn-lg btn-success me-3')[0].click();")
                                _driver.execute_script(script)

                                alert2 = WebDriverWait(_driver, 10).until(EC.alert_is_present())

                                if alert2.text == '인증번호가 올바르지 않습니다':
                                    Alert(_driver).accept()  # 확인 버튼 클릭

                                    script = (f"document.getElementById('check_number').value='{''}';")
                                    _driver.execute_script(script)

                                    # 텍스트 상자에 길이가 5이고 숫자인 값이 입력 될 때까지 대기합니다.
                                    textbox = wait.until(EC.element_to_be_clickable((By.ID, 'check_number')))
                                    wait.until(
                                        lambda driver: len(
                                            textbox.get_attribute('value').strip()) == 6 and textbox.get_attribute(
                                            'value').strip().isdigit())

                                    script = (
                                        "document.getElementsByClassName('btn btn-lg btn-success me-3')[0].click();")
                                    _driver.execute_script(script)

                                    _driver.close()
                                    _driver.switch_to.window(parent_window)
                                else:
                                    Alert(_driver).accept()  # 확인 버튼 클릭

                                    _driver.switch_to.window(parent_window)

                                    script = ("document.getElementsByClassName('button action_write')[0].click();")
                                    _driver.execute_script(script)

                                    WebDriverWait(_driver, 10).until(EC.alert_is_present())
                                    Alert(_driver).accept()  # 확인 버튼 클릭
                            courtNumberUp += 1
                        except Exception as e:
                            print('1')
                            print(e)
                            _driver.switch_to.window(parent_window)
                            courtNumberUp += 1
                    else:
                        return
                except (
                        UnexpectedAlertPresentException, NoSuchElementException, JavascriptException, WebDriverException,
                        IndexError) as e:
                    courtNumberUp += 1
                    pass
    else:
        checkboxIds = getCheckBoxIds(isWeek, startCourt, int(startTime), int(endTime))

        checkScripts = [];
        for j in checkboxIds:
            checkScripts.append("document.getElementById('" + j + "').click();")

        sCheckScripts = "\n".join(checkScripts)

        url = 'https://www.ycs.or.kr/fmcs/4?facilities_type=L&base_date=' + str(
            usedDate) + '&rent_type=1001&center=YCS04&part=02&place=' + str(startCourt) + '#regist_list'

        for i in range(10000000000):
            try:
                if self.isStart:
                    _driver.get(url)

                    WebDriverWait(_driver, 10).until(
                        EC.presence_of_element_located((By.ID, "checkbox_time_0"))
                    )

                    # execute_script()를 사용하여 스크립트 실행
                    _driver.execute_script(sCheckScripts)

                    WebDriverWait(_driver, 10).until(
                        EC.presence_of_element_located((By.ID, "phone_chk"))
                    )

                    script = ("document.getElementById('phone_chk').click();")

                    _driver.execute_script(script)

                    all_windows = _driver.window_handles

                    if len([window for window in all_windows if window != parent_window]) == 0:
                        continue

                    child_window = [window for window in all_windows if window != parent_window][0]

                    _driver.switch_to.window(child_window)

                    WebDriverWait(_driver, 10).until(
                        EC.presence_of_element_located((By.ID, "pattern_inactive"))
                    )

                    script = ("document.getElementById('pattern_inactive').click();")

                    _driver.execute_script(script)

                    # 핸들러를 사용하여 현재 띄어진 창으로 전환
                    _driver.switch_to.window(_driver.current_window_handle)

                    # 현재 띄어진 창에서 스크린샷을 찍기
                    _driver.save_screenshot("screenshot1.png")

                    # 원하는 태그만 자르기
                    from PIL import Image
                    dnjsqhsimage = Image.open("screenshot1.png")

                    decodedObjects = pyzbar.decode(dnjsqhsimage)

                    qrcodeData = ""

                    for obj in decodedObjects:
                        qrcodeData = obj.data.decode("utf-8").split(":")[1].strip()

                    try:
                        script = (f"document.getElementById('qr_number').value='{qrcodeData}';")
                        _driver.execute_script(script)

                        verificationButton = _driver.find_element(By.CSS_SELECTOR, '#container_qr > div.mt-2 > div.button_contents.mt-4 > div > div.col-3 > button')
                        verificationButton.click()

                        # 경고창을 띄웁니다.
                        # alert = _driver.switch_to.alert
                        WebDriverWait(_driver, 10).until(EC.alert_is_present())

                        # 경고창을 클릭합니다.
                        Alert(_driver).accept()  # 확인 버튼 클릭

                        _driver.switch_to.window(parent_window)

                        WebDriverWait(_driver, 10).until(
                            EC.presence_of_element_located((By.CLASS_NAME, "action_application"))
                        )

                        script = ("document.getElementsByClassName('action_application')[0].click();")

                        _driver.execute_script(script)

                        WebDriverWait(_driver, 10).until(EC.alert_is_present())

                        # 경고창을 클릭합니다.
                        Alert(_driver).accept()  # 확인 버튼 클릭

                        WebDriverWait(_driver, 10).until(
                            EC.presence_of_element_located((By.ID, "team_nm"))
                        )

                        time_datas = _driver.find_element(By.ID, 'time_datas')
                        time_datsValue = time_datas.get_attribute('value')

                        if len(time_datsValue.split('|')) == 1:
                            continue

                        phoneNumberEle = _driver.find_element(By.ID, 'mobile_tel')

                        # phoneNum = phoneNumberEle.get_attribute("value").replace('-', '')
                        phoneNum = '01063327323'

                        script = (f"document.getElementById('team_nm').value='{teamName}';"
                                  f"document.getElementById('users').value={userCount};"
                                  "document.getElementById('tel').value = '';"
                                  f"document.getElementById('purpose').value = '{purpose}';"
                                  "document.getElementById('agree_use1').checked = true;")

                        self.chromeDriver.execute_script(script)

                        self.chromeDriver.implicitly_wait(5)

                        script = ("document.getElementsByClassName('button action_write')[0].click();")
                        _driver.execute_script(script)

                        alert = WebDriverWait(_driver, 10).until(EC.alert_is_present())

                        if alert.text != '인증이 완료되지 않았습니다. 인증 부탁드립니다.':
                            Alert(_driver).accept()  # 확인 버튼 클릭

                            script = ("document.getElementsByClassName('button action_write')[0].click();")
                            _driver.execute_script(script)

                            WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            Alert(_driver).accept()  # 확인 버튼 클릭
                        else:
                            Alert(_driver).accept()  # 확인 버튼 클릭

                            script = ("document.getElementsByClassName('button action_edit')[0].click();")
                            self.chromeDriver.execute_script(script)

                            all_windows = _driver.window_handles

                            child_window = [window for window in all_windows if window != parent_window][0]

                            _driver.switch_to.window(child_window)

                            script = ("document.getElementsByClassName('white_content')[0].setAttribute('style', 'display:none;');"
                                      "document.getElementsByClassName('black_background')[0].setAttribute('style', 'display:none;');")

                            WebDriverWait(_driver, 10).until(
                                EC.presence_of_element_located((By.ID, "message_inactive"))
                            )

                            _driver.execute_script(script)

                            script = ("document.getElementById('message_inactive').click();")

                            _driver.execute_script(script)

                            wait = WebDriverWait(_driver, 10)
                            # loadingBar = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, 'white_content')))

                            # script = ("document.getElementsByClassName('btn btn-lg btn-secondary')[0].click()")

                            script = (f"document.getElementById('phone_number').value='{phoneNum}';"
                                      "document.getElementsByClassName('btn btn-lg btn-secondary')[0].click()")

                            _driver.execute_script(script)

                            # 경고창을 클릭합니다.
                            WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            Alert(_driver).accept()  # 확인 버튼 클릭

                            startTime = time.time()
                            smsVerificationResult = checkVerificationCode(_driver)
                            endTime3 = time.time()

                            print(smsVerificationResult)

                            print("걸린 시간 : " + f"{endTime3 - startTime:.5f} sec")

                            return

                            # # 텍스트 상자에 길이가 5이고 숫자인 값이 입력 될 때까지 대기합니다.
                            # textbox = wait.until(EC.element_to_be_clickable((By.ID, 'check_number')))
                            # wait.until(
                            #     lambda driver: len(textbox.get_attribute('value').strip()) == 6)
                            #
                            # script = ("document.getElementsByClassName('btn btn-lg btn-success me-3')[0].click();")
                            # _driver.execute_script(script)
                            #
                            # alert2 = WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            #
                            # if alert2.text == '인증번호가 올바르지 않습니다':
                            #     Alert(_driver).accept()  # 확인 버튼 클릭
                            #
                            #     script = (f"document.getElementById('check_number').value='{''}';")
                            #     _driver.execute_script(script)
                            #
                            #     # 텍스트 상자에 길이가 5이고 숫자인 값이 입력 될 때까지 대기합니다.
                            #     textbox = wait.until(EC.element_to_be_clickable((By.ID, 'check_number')))
                            #     wait.until(
                            #         lambda driver: len(
                            #             textbox.get_attribute('value').strip()) == 6)
                            #
                            #     script = (
                            #         "document.getElementsByClassName('btn btn-lg btn-success me-3')[0].click();")
                            #     _driver.execute_script(script)
                            #
                            #     alert3 = WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            #     if alert3.text == '인증번호가 올바르지 않습니다':
                            #         _driver.close()
                            #         _driver.switch_to.window(parent_window)
                            #     else:
                            #         Alert(_driver).accept()  # 확인 버튼 클릭
                            #
                            #         _driver.switch_to.window(parent_window)
                            #
                            #         script = ("document.getElementsByClassName('button action_write')[0].click();")
                            #         _driver.execute_script(script)
                            #
                            #         WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            #         Alert(_driver).accept()  # 확인 버튼 클릭
                            # else:
                            #     Alert(_driver).accept()  # 확인 버튼 클릭
                            #
                            #     _driver.switch_to.window(parent_window)
                            #
                            #     script = ("document.getElementsByClassName('button action_write')[0].click();")
                            #     _driver.execute_script(script)
                            #
                            #     WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            #     Alert(_driver).accept()  # 확인 버튼 클릭
                    except:
                        _driver.switch_to.window(parent_window)
                else:
                    return
            except (
            UnexpectedAlertPresentException, NoSuchElementException, JavascriptException, WebDriverException, IndexError) as e:
                _driver.switch_to.window(parent_window)
                pass


def checkVerificationCode(_driver):
    time.sleep(3)
    isRes = False

    botToken = 'abcd'

    client = WebClient(token=botToken)

    try:
        count = 0
        isOk = False
        while not isOk:
            count += 1

            if count > 6:
                isOk = True

            response = client.conversations_history(channel="C055M10JWF8", limit=10)
            messages = response["messages"]
            mesText = messages[0]['text']

            try:
                verificationCode = mesText.split('\n')[5].strip()

                script = (f"document.getElementById('check_number').value='{verificationCode}';"
                         "document.getElementsByClassName('btn btn-lg btn-success me-3')[0].click();")

                _driver.execute_script(script)

                alert = WebDriverWait(_driver, 10).until(EC.alert_is_present())

                if alert.text == '인증번호가 올바르지 않습니다':
                    Alert(_driver).accept()  # 확인 버튼 클릭

                    script = (f"document.getElementById('check_number').value='{''}';")
                    _driver.execute_script(script)
                else:
                    isOk = True
                    isRes = True
            except IndexError:
                continue

        return isRes

    except SlackApiError as e2:
        print(e2)
        print('Error: {}'.format(e2.response['error']))


def getCheckBoxIds(rIsWeek, rCourtNum, rStartTime, rEndTime):
    checkBoxIds = []

    if str(rCourtNum) == '9' or str(rCourtNum) == '12' or str(rCourtNum) == '14' or str(rCourtNum) == '16' or str(rCourtNum) == '17' or str(rCourtNum) == '18':
        if rIsWeek:
            if str(rEndTime) == '22':
                if str(rStartTime) == '21':
                    checkBoxIds.append('checkbox_time_9')
                else:
                    for i in range(8, 10):
                        checkBoxIds.append('checkbox_time_' + str(i))
            else:
                for i in range(0, rEndTime - rStartTime):
                    checkBoxIds.append('checkbox_time_' + str(rStartTime - 6 + i))
        else:
            for i in range(rStartTime, rEndTime):
                checkBoxIds.append('checkbox_time_' + str(i - 6))
    else:
        if rIsWeek:
            if str(rEndTime) == '22':
                if str(rStartTime) == '21':
                    checkBoxIds.append('checkbox_time_6')
                else:
                    for i in range(5, 7):
                        checkBoxIds.append('checkbox_time_' + str(i))
            else:
                for i in range(0, rEndTime - rStartTime):
                    checkBoxIds.append('checkbox_time_' + str(rStartTime - 9 + i))
        else:
            for i in range(rStartTime, rEndTime):
                checkBoxIds.append('checkbox_time_' + str(i - 9))

    return checkBoxIds

def set_chrome_driver():
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('headless')
    chrome_options.add_argument("disable-gpu")
    chrome_options.add_argument("disable-infobars")
    chrome_options.add_argument("--disable-extensions")

    # chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
    # chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9223")
    chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9224")
    # chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9225")
    # chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9226")

    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
    except Exception as e:
        print(e)
        driver = webdriver.Chrome(options=chrome_options)

    return driver

class RunMacro:
    def __init__(self, parent):
        subprocess.Popen(
            # r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp1"')  # 디버거 크롬 구동
            # r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9223 --user-data-dir="C:\chrometemp2"')  # 디버거 크롬 구동
            r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9224 --user-data-dir="C:\chrometemp3"')  # 디버거 크롬 구동
            # r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9225 --user-data-dir="C:\chrometemp4"')  # 디버거 크롬 구동
            # r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9226 --user-data-dir="C:\chrometemp5"')  # 디버거 크롬 구동

        self.chromeDriver = set_chrome_driver()
        self.parent = parent
        self.isStart = False
        self.macroInfoList = None

    def moveToLoginPage(self):
        loginPagePath = 'https://www.ycs.or.kr/fmcs/133?referer=https%3A%2F%2Fwww.ycs.or.kr%2Ffmcs%2F1'
        self.chromeDriver.get(loginPagePath)

    def startMacro(self):
        self.isStart = True

        # 대표자
        teamName = self.parent.le_Team.text()
        # 참가 인원
        userCount = self.parent.cb_UsersCount.currentText()
        # 이용 목적
        purpose = self.parent.le_Purpose.text()
        # 이용 날짜
        usedDate = self.parent.usedDate
        # 시작 코트
        startCourt = self.parent.cb_StartCourt.currentText()
        # 종료 코트
        endCourt = self.parent.cb_EndCourt.currentText()
        # 시작 시간
        startTime = int(self.parent.cb_StartTime.currentText().split(':')[0])
        # 종료 시간
        endTime = int(self.parent.cb_EndTime.currentText().split(':')[0])

        # 주말 여부
        isWeek = self.parent.isWeek

        if isWeek:
            with open('macroDatasWeekEnd.csv', "r", encoding='utf-8-sig') as f:
                reader = csv.reader(f)
                macroInfoList = list(reader)
                self.macroInfoList = macroInfoList
        else:
            with open('macroDatasWeekDay.csv', "r", encoding='utf-8-sig') as f:
                reader = csv.reader(f)
                macroInfoList = list(reader)
                self.macroInfoList = macroInfoList

        try:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

            t1 = threading.Thread(target=Worker123, args=(
                self, startCourt, endCourt, usedDate, startTime, endTime, teamName, userCount, purpose, isWeek))
            t1.daemon = True
            t1.start()
        except Exception as e:
            pass

    def stopMacro(self):
        self.parent.setLog("매크로 중지!")
        self.isStart = False

    def quitDriver(self):
        try:
            _driver = self.chromeDriver
            _driver.stop_client()
            _driver.quit()
        except Exception as e:
            print(e)
            pass

    def stopMacro(self):
        self.parent.setLog("매크로 중지!")
        self.isStart = False
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
   -================================================
   # StartTime,9,10,11,12,13,14,15,16,17,18,19,20,21
# Court 1,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407
# Court 2,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679
# Court 3,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695
# Court 4,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2360,2166
# Court 5,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182
# Court 6,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198
==============================================================================

<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>Gajwa</class>
 <widget class="QMainWindow" name="Gajwa">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>620</width>
    <height>570</height>
   </rect>
  </property>
  <property name="minimumSize">
   <size>
    <width>620</width>
    <height>570</height>
   </size>
  </property>
  <property name="maximumSize">
   <size>
    <width>620</width>
    <height>570</height>
   </size>
  </property>
  <property name="sizeIncrement">
   <size>
    <width>600</width>
    <height>700</height>
   </size>
  </property>
  <property name="windowTitle">
   <string>Gajwa</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <widget class="QWidget" name="horizontalLayoutWidget">
    <property name="geometry">
     <rect>
      <x>270</x>
      <y>10</y>
      <width>341</width>
      <height>41</height>
     </rect>
    </property>
    <layout class="QHBoxLayout" name="horizontalLayout">
     <property name="spacing">
      <number>6</number>
     </property>
     <property name="sizeConstraint">
      <enum>QLayout::SetMinimumSize</enum>
     </property>
     <property name="bottomMargin">
      <number>0</number>
     </property>
     <item>
      <widget class="QPushButton" name="btn_Start">
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
       <property name="text">
        <string>START</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QPushButton" name="btn_Stop">
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
       <property name="text">
        <string>STOP</string>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
   <widget class="QWidget" name="horizontalLayoutWidget_2">
    <property name="geometry">
     <rect>
      <x>10</x>
      <y>10</y>
      <width>251</width>
      <height>41</height>
     </rect>
    </property>
    <layout class="QHBoxLayout" name="horizontalLayout_2">
     <property name="leftMargin">
      <number>10</number>
     </property>
     <item>
      <widget class="QLabel" name="label">
       <property name="minimumSize">
        <size>
         <width>0</width>
         <height>0</height>
        </size>
       </property>
       <property name="maximumSize">
        <size>
         <width>40</width>
         <height>16777215</height>
        </size>
       </property>
       <property name="text">
        <string>USER : </string>
       </property>
       <property name="alignment">
        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QComboBox" name="cb_Users">
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
   <widget class="QWidget" name="gridLayoutWidget">
    <property name="geometry">
     <rect>
      <x>10</x>
      <y>70</y>
      <width>371</width>
      <height>241</height>
     </rect>
    </property>
    <layout class="QGridLayout" name="gridLayout_4">
     <item row="0" column="0">
      <widget class="QCalendarWidget" name="cal_UsedDate">
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
       <property name="styleSheet">
        <string notr="true"/>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
   <widget class="QGroupBox" name="groupBox">
    <property name="geometry">
     <rect>
      <x>10</x>
      <y>320</y>
      <width>301</width>
      <height>231</height>
     </rect>
    </property>
    <property name="styleSheet">
     <string notr="true">color: green;
border-style: solid;
border-width: 2px;
border-color: blue;
border-radius: 3px;
font: 14pt &quot;HY엽서L&quot;;</string>
    </property>
    <property name="title">
     <string>ADD USER</string>
    </property>
    <widget class="QWidget" name="formLayoutWidget_3">
     <property name="geometry">
      <rect>
       <x>10</x>
       <y>30</y>
       <width>281</width>
       <height>227</height>
      </rect>
     </property>
     <layout class="QFormLayout" name="formLayout_4">
      <property name="leftMargin">
       <number>5</number>
      </property>
      <property name="topMargin">
       <number>10</number>
      </property>
      <property name="rightMargin">
       <number>5</number>
      </property>
      <item row="1" column="0" colspan="2">
       <widget class="QLabel" name="label_11">
        <property name="minimumSize">
         <size>
          <width>0</width>
          <height>40</height>
         </size>
        </property>
        <property name="toolTip">
         <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'noto','notojp','notokr','Helvetica','Microsoft YaHei','Apple SD Gothic Neo','Malgun Gothic','맑은 고딕','Dotum','돋움','sans-serif'; font-size:40px; color:#000000; background-color:#fdfdfd;&quot;&gt;Add the users you need to log in.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
        </property>
        <property name="whatsThis">
         <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
        </property>
        <property name="styleSheet">
         <string notr="true">border:none;
color: black;</string>
        </property>
        <property name="text">
         <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; color:#000000;&quot;&gt;ADD NEW LOGIN USER&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
        </property>
        <property name="alignment">
         <set>Qt::AlignCenter</set>
        </property>
        <property name="margin">
         <number>5</number>
        </property>
       </widget>
      </item>
      <item row="2" column="0">
       <widget class="QLabel" name="label_8">
        <property name="styleSheet">
         <string notr="true">border:none;
color:black;</string>
        </property>
        <property name="text">
         <string>NAME :</string>
        </property>
        <property name="alignment">
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
        <property name="margin">
         <number>5</number>
        </property>
       </widget>
      </item>
      <item row="3" column="0">
       <widget class="QLabel" name="label_9">
        <property name="styleSheet">
         <string notr="true">border:none;
color:black;</string>
        </property>
        <property name="text">
         <string>      ID :</string>
        </property>
        <property name="alignment">
         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
        </property>
        <property name="margin">
         <number>5</number>
        </property>
       </widget>
      </item>
      <item row="4" column="0">
       <widget class="QLabel" name="label_10">
        <property name="styleSheet">
         <string notr="true">border:none;
color:black;</string>
        </property>
        <property name="text">
         <string>  PWD :</string>
        </property>
        <property name="margin">
         <number>10</number>
        </property>
       </widget>
      </item>
      <item row="4" column="1">
       <widget class="QLineEdit" name="le_UserPwd">
        <property name="minimumSize">
         <size>
          <width>0</width>
          <height>26</height>
         </size>
        </property>
        <property name="styleSheet">
         <string notr="true">border-style: solid;
border-width: 1px;
border-color: black;
border-radius: 3px;
font: 11pt &quot;HY견고딕&quot; black;
color: black;</string>
        </property>
       </widget>
      </item>
      <item row="5" column="0">
       <widget class="QPushButton" name="btn_CheckNAdd">
        <property name="cursor">
         <cursorShape>PointingHandCursor</cursorShape>
        </property>
        <property name="styleSheet">
         <string notr="true">color:green;
border-style: solid;
border-width: 1px;
border-color: green;
border-radius: 3px;
font: 16pt &quot;HY엽서L&quot;;</string>
        </property>
        <property name="text">
         <string>CHECK</string>
        </property>
       </widget>
      </item>
      <item row="5" column="1">
       <widget class="QPushButton" name="btn_UserAdd">
        <property name="cursor">
         <cursorShape>PointingHandCursor</cursorShape>
        </property>
        <property name="styleSheet">
         <string notr="true">color: red;
border-style: solid;
border-width: 1px;
border-color: red;
border-radius: 3px;
font: 16pt &quot;HY엽서L&quot;;
text-decoration: line-through;</string>
        </property>
        <property name="text">
         <string>ADD</string>
        </property>
        <property name="checkable">
         <bool>true</bool>
        </property>
        <property name="autoDefault">
         <bool>true</bool>
        </property>
        <property name="default">
         <bool>true</bool>
        </property>
        <property name="flat">
         <bool>true</bool>
        </property>
       </widget>
      </item>
      <item row="2" column="1">
       <widget class="QLineEdit" name="le_UserName">
        <property name="styleSheet">
         <string notr="true">border-style: solid;
border-width: 1px;
border-color: black;
border-radius: 3px;
font: 16pt &quot;HY견고딕&quot; black;
color: black;</string>
        </property>
       </widget>
      </item>
      <item row="3" column="1">
       <widget class="QLineEdit" name="le_UserId">
        <property name="styleSheet">
         <string notr="true">border-style: solid;
border-width: 1px;
border-color: black;
border-radius: 3px;
font: 16pt &quot;HY견고딕&quot; black;
color: black;</string>
        </property>
        <property name="alignment">
         <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
        </property>
       </widget>
      </item>
     </layout>
    </widget>
   </widget>
   <widget class="QScrollArea" name="scrollArea">
    <property name="geometry">
     <rect>
      <x>320</x>
      <y>321</y>
      <width>291</width>
      <height>171</height>
     </rect>
    </property>
    <property name="styleSheet">
     <string notr="true">border-style: solid;
border-width: 1px;
border-color: blue;
border-radius: 3px;</string>
    </property>
    <property name="widgetResizable">
     <bool>true</bool>
    </property>
    <widget class="QWidget" name="scrollAreaWidgetContents">
     <property name="geometry">
      <rect>
       <x>0</x>
       <y>0</y>
       <width>289</width>
       <height>169</height>
      </rect>
     </property>
     <widget class="QWidget" name="gridLayoutWidget_3">
      <property name="geometry">
       <rect>
        <x>-1</x>
        <y>-1</y>
        <width>291</width>
        <height>171</height>
       </rect>
      </property>
      <layout class="QGridLayout" name="gridLayout_6">
       <item row="0" column="0">
        <widget class="QTextBrowser" name="tb_Log"/>
       </item>
      </layout>
     </widget>
    </widget>
   </widget>
   <widget class="QWidget" name="gridLayoutWidget_2">
    <property name="geometry">
     <rect>
      <x>320</x>
      <y>498</y>
      <width>291</width>
      <height>52</height>
     </rect>
    </property>
    <layout class="QGridLayout" name="gridLayout_5">
     <item row="0" column="0">
      <widget class="QPushButton" name="btn_Exit">
       <property name="minimumSize">
        <size>
         <width>0</width>
         <height>50</height>
        </size>
       </property>
       <property name="font">
        <font>
         <family>HY견고딕</family>
         <pointsize>16</pointsize>
         <weight>50</weight>
         <italic>false</italic>
         <bold>false</bold>
         <strikeout>false</strikeout>
        </font>
       </property>
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
       <property name="styleSheet">
        <string notr="true">background: rgb(255, 223, 60);
font: 16pt &quot;HY견고딕&quot;;
border-style: solid;
border-width: 1px;
border-color: black;
border-radius: 3px;</string>
       </property>
       <property name="text">
        <string>EXIT</string>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
   <widget class="QWidget" name="formWidget_2" native="true">
    <property name="geometry">
     <rect>
      <x>390</x>
      <y>230</y>
      <width>221</width>
      <height>81</height>
     </rect>
    </property>
    <property name="styleSheet">
     <string notr="true">border-style: solid;
border-width: 1px;
border-color: black;
border-radius: 3px;</string>
    </property>
    <layout class="QFormLayout" name="formLayout_3">
     <property name="leftMargin">
      <number>5</number>
     </property>
     <property name="rightMargin">
      <number>5</number>
     </property>
     <item row="1" column="0">
      <widget class="QLabel" name="label_6">
       <property name="styleSheet">
        <string notr="true">font: 9pt &quot;궁서&quot;;
border:none;</string>
       </property>
       <property name="text">
        <string>START TIME : </string>
       </property>
       <property name="alignment">
        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
       </property>
      </widget>
     </item>
     <item row="1" column="1">
      <widget class="QComboBox" name="cb_StartTime">
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
      </widget>
     </item>
     <item row="2" column="0">
      <widget class="QLabel" name="label_7">
       <property name="styleSheet">
        <string notr="true">font: 9pt &quot;궁서&quot;;
border:none;</string>
       </property>
       <property name="text">
        <string>   END TIME : </string>
       </property>
       <property name="alignment">
        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
       </property>
       <property name="margin">
        <number>1</number>
       </property>
      </widget>
     </item>
     <item row="2" column="1">
      <widget class="QComboBox" name="cb_EndTime">
       <property name="cursor">
        <cursorShape>PointingHandCursor</cursorShape>
       </property>
      </widget>
     </item>
     <item row="0" column="0" colspan="2">
      <widget class="QLabel" name="label_3">
       <property name="minimumSize">
        <size>
         <width>0</width>
         <height>25</height>
        </size>
       </property>
       <property name="styleSheet">
        <string notr="true">font: 11pt &quot;HY엽서M&quot;;
border:none;</string>
       </property>
       <property name="text">
        <string>CHOOSE TIME</string>
       </property>
       <property name="alignment">
        <set>Qt::AlignCenter</set>
       </property>
       <property name="margin">
        <number>0</number>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
   <widget class="Line" name="line_2">
    <property name="geometry">
     <rect>
      <x>10</x>
      <y>52</y>
      <width>601</width>
      <height>16</height>
     </rect>
    </property>
    <property name="orientation">
     <enum>Qt::Horizontal</enum>
    </property>
   </widget>
   <widget class="QWidget" name="verticalLayoutWidget">
    <property name="geometry">
     <rect>
      <x>390</x>
      <y>60</y>
      <width>221</width>
      <height>161</height>
     </rect>
    </property>
    <layout class="QVBoxLayout" name="verticalLayout">
     <item>
      <widget class="QListWidget" name="lw_1">
       <property name="selectionMode">
        <enum>QAbstractItemView::SingleSelection</enum>
       </property>
       <property name="movement">
        <enum>QListView::Static</enum>
       </property>
      </widget>
     </item>
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout_7">
       <item>
        <widget class="QPushButton" name="btn_Add">
         <property name="text">
          <string>ADD</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QPushButton" name="btn_Remove">
         <property name="text">
          <string>DELETE</string>
         </property>
        </widget>
       </item>
      </layout>
     </item>
     <item>
      <widget class="QListWidget" name="lw_2">
       <property name="selectionMode">
        <enum>QAbstractItemView::SingleSelection</enum>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
  </widget>
  <widget class="QMenuBar" name="menubar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>620</width>
     <height>21</height>
    </rect>
   </property>
  </widget>
  <widget class="QStatusBar" name="statusbar"/>
 </widget>
 <resources/>
 <connections/>
</ui>


